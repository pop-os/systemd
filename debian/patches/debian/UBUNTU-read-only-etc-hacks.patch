From: Nick Rosbrook <nick.rosbrook@canonical.com>
Date: Fri, 21 Apr 2023 15:23:48 -0400
Subject: tree-wide: consolidate Ubuntu core's read-only /etc hacks

Forwarded: no
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1981042
Bug-Ubuntu: https://bugs.launchpad.net/snappy/+bug/1953172
Bug-Ubuntu: https://launchpad.net/bugs/1227520
Bug-Ubuntu: https://bugs.launchpad.net/snappy/+bug/1650688
Last-Update: 2023-04-27
---
 src/basic/meson.build     |  1 +
 src/basic/ro-etc-hack.c   | 27 +++++++++++++++++++++++++++
 src/basic/ro-etc-hack.h   |  6 ++++++
 src/basic/time-util.c     |  3 ++-
 src/core/manager.c        |  5 +++--
 src/firstboot/firstboot.c |  7 ++++---
 src/hostname/hostnamed.c  | 15 ++++++++-------
 src/timedate/timedated.c  | 11 ++++++-----
 8 files changed, 57 insertions(+), 18 deletions(-)
 create mode 100644 src/basic/ro-etc-hack.c
 create mode 100644 src/basic/ro-etc-hack.h

diff --git a/src/basic/meson.build b/src/basic/meson.build
index 7aae031..cccf013 100644
--- a/src/basic/meson.build
+++ b/src/basic/meson.build
@@ -70,6 +70,7 @@ basic_sources = files(
         'recurse-dir.c',
         'replace-var.c',
         'rlimit-util.c',
+        'ro-etc-hack.c',
         'sigbus.c',
         'signal-util.c',
         'siphash24.c',
diff --git a/src/basic/ro-etc-hack.c b/src/basic/ro-etc-hack.c
new file mode 100644
index 0000000..f1db71c
--- /dev/null
+++ b/src/basic/ro-etc-hack.c
@@ -0,0 +1,27 @@
+/* SPDX-License-Identifier: LGPL-2.1-or-later */
+
+#include <errno.h>
+#include <linux/limits.h>
+#include <stdio.h>
+
+#include "alloc-util.h"
+#include "fs-util.h"
+#include "ro-etc-hack.h"
+#include "string-util-fundamental.h"
+
+const char* writable_filename(const char *path) {
+        ssize_t r;
+        static char realfile_buf[PATH_MAX];
+        _cleanup_free_ char *realfile = NULL;
+        const char *result = path;
+        int orig_errno = errno;
+
+        r = readlink_and_make_absolute(path, &realfile);
+        if (r >= 0 && startswith(realfile, "/etc/writable")) {
+                snprintf(realfile_buf, sizeof(realfile_buf), "%s", realfile);
+                result = realfile_buf;
+        }
+
+        errno = orig_errno;
+        return result;
+}
diff --git a/src/basic/ro-etc-hack.h b/src/basic/ro-etc-hack.h
new file mode 100644
index 0000000..2ef881f
--- /dev/null
+++ b/src/basic/ro-etc-hack.h
@@ -0,0 +1,6 @@
+/* SPDX-License-Identifier: LGPL-2.1-or-later */
+#pragma once
+
+/* Hack for Ubuntu phone: check if path is an existing symlink to
+ * /etc/writable; if it is, update that instead */
+const char *writable_filename(const char *path);
diff --git a/src/basic/time-util.c b/src/basic/time-util.c
index 0bea149..0ad187a 100644
--- a/src/basic/time-util.c
+++ b/src/basic/time-util.c
@@ -22,6 +22,7 @@
 #include "parse-util.h"
 #include "path-util.h"
 #include "process-util.h"
+#include "ro-etc-hack.h"
 #include "stat-util.h"
 #include "string-table.h"
 #include "string-util.h"
@@ -1479,7 +1480,7 @@ int get_timezone(char **ret) {
         char *z;
         int r;
 
-        r = readlink_malloc("/etc/localtime", &t);
+        r = readlink_malloc(writable_filename("/etc/localtime"), &t);
         if (r == -ENOENT) {
                 /* If the symlink does not exist, assume "UTC", like glibc does */
                 z = strdup("UTC");
diff --git a/src/core/manager.c b/src/core/manager.c
index 1853526..8dd87e1 100644
--- a/src/core/manager.c
+++ b/src/core/manager.c
@@ -72,6 +72,7 @@
 #include "ratelimit.h"
 #include "rlimit-util.h"
 #include "rm-rf.h"
+#include "ro-etc-hack.h"
 #include "selinux-util.h"
 #include "signal-util.h"
 #include "socket-util.h"
@@ -433,7 +434,7 @@ static int manager_read_timezone_stat(Manager *m) {
         assert(m);
 
         /* Read the current stat() data of /etc/localtime so that we detect changes */
-        if (lstat("/etc/localtime", &st) < 0) {
+        if (lstat(writable_filename("/etc/localtime"), &st) < 0) {
                 log_debug_errno(errno, "Failed to stat /etc/localtime, ignoring: %m");
                 changed = m->etc_localtime_accessible;
                 m->etc_localtime_accessible = false;
@@ -470,7 +471,7 @@ static int manager_setup_timezone_change(Manager *m) {
          * Note that we create the new event source first here, before releasing the old one. This should optimize
          * behaviour as this way sd-event can reuse the old watch in case the inode didn't change. */
 
-        r = sd_event_add_inotify(m->event, &new_event, "/etc/localtime",
+        r = sd_event_add_inotify(m->event, &new_event, writable_filename("/etc/localtime"),
                                  IN_ATTRIB|IN_MOVE_SELF|IN_CLOSE_WRITE|IN_DONT_FOLLOW, manager_dispatch_timezone_change, m);
         if (r == -ENOENT) {
                 /* If the file doesn't exist yet, subscribe to /etc instead, and wait until it is created either by
diff --git a/src/firstboot/firstboot.c b/src/firstboot/firstboot.c
index 9e79f84..ccc638e 100644
--- a/src/firstboot/firstboot.c
+++ b/src/firstboot/firstboot.c
@@ -35,6 +35,7 @@
 #include "proc-cmdline.h"
 #include "pwquality-util.h"
 #include "random-util.h"
+#include "ro-etc-hack.h"
 #include "smack-util.h"
 #include "string-util.h"
 #include "strv.h"
@@ -480,7 +481,7 @@ static int process_timezone(void) {
         const char *etc_localtime, *e;
         int r;
 
-        etc_localtime = prefix_roota(arg_root, "/etc/localtime");
+        etc_localtime = prefix_roota(arg_root, writable_filename("/etc/localtime"));
         if (laccess(etc_localtime, F_OK) >= 0 && !arg_force) {
                 log_debug("Found %s, assuming timezone has been configured.",
                           etc_localtime);
@@ -490,7 +491,7 @@ static int process_timezone(void) {
         if (arg_copy_timezone && arg_root) {
                 _cleanup_free_ char *p = NULL;
 
-                r = readlink_malloc("/etc/localtime", &p);
+                r = readlink_malloc(writable_filename("/etc/localtime"), &p);
                 if (r != -ENOENT) {
                         if (r < 0)
                                 return log_error_errno(r, "Failed to read host timezone: %m");
@@ -512,7 +513,7 @@ static int process_timezone(void) {
         if (isempty(arg_timezone))
                 return 0;
 
-        e = strjoina("../usr/share/zoneinfo/", arg_timezone);
+        e = strjoina("/usr/share/zoneinfo/", arg_timezone);
 
         (void) mkdir_parents(etc_localtime, 0755);
         r = symlink_atomic(e, etc_localtime);
diff --git a/src/hostname/hostnamed.c b/src/hostname/hostnamed.c
index 36ab014..ff3a5eb 100644
--- a/src/hostname/hostnamed.c
+++ b/src/hostname/hostnamed.c
@@ -28,6 +28,7 @@
 #include "os-util.h"
 #include "parse-util.h"
 #include "path-util.h"
+#include "ro-etc-hack.h"
 #include "sd-device.h"
 #include "selinux-util.h"
 #include "service-util.h"
@@ -119,7 +120,7 @@ static void context_read_machine_info(Context *c) {
 
         assert(c);
 
-        if (stat("/etc/machine-info", &current_stat) >= 0 &&
+        if (stat(writable_filename("/etc/machine-info"), &current_stat) >= 0 &&
             stat_inode_unmodified(&c->etc_machine_info_stat, &current_stat))
                 return;
 
@@ -132,7 +133,7 @@ static void context_read_machine_info(Context *c) {
                       (UINT64_C(1) << PROP_HARDWARE_VENDOR) |
                       (UINT64_C(1) << PROP_HARDWARE_MODEL));
 
-        r = parse_env_file(NULL, "/etc/machine-info",
+        r = parse_env_file(NULL, writable_filename("/etc/machine-info"),
                            "PRETTY_HOSTNAME", &c->data[PROP_PRETTY_HOSTNAME],
                            "ICON_NAME", &c->data[PROP_ICON_NAME],
                            "CHASSIS", &c->data[PROP_CHASSIS],
@@ -578,14 +579,14 @@ static int context_write_data_static_hostname(Context *c) {
         s = &c->etc_hostname_stat;
 
         if (isempty(c->data[PROP_STATIC_HOSTNAME])) {
-                if (unlink("/etc/hostname") < 0 && errno != ENOENT)
+                if (unlink(writable_filename("/etc/hostname")) < 0 && errno != ENOENT)
                         return -errno;
 
                 TAKE_PTR(s);
                 return 0;
         }
 
-        r = write_string_file_atomic_label("/etc/hostname", c->data[PROP_STATIC_HOSTNAME]);
+        r = write_string_file_atomic_label(writable_filename("/etc/hostname"), c->data[PROP_STATIC_HOSTNAME]);
         if (r < 0)
                 return r;
 
@@ -611,7 +612,7 @@ static int context_write_data_machine_info(Context *c) {
          * already, even if we can't make it hit the disk. */
         s = &c->etc_machine_info_stat;
 
-        r = load_env_file(NULL, "/etc/machine-info", &l);
+        r = load_env_file(NULL, writable_filename("/etc/machine-info"), &l);
         if (r < 0 && r != -ENOENT)
                 return r;
 
@@ -624,14 +625,14 @@ static int context_write_data_machine_info(Context *c) {
         }
 
         if (strv_isempty(l)) {
-                if (unlink("/etc/machine-info") < 0 && errno != ENOENT)
+                if (unlink(writable_filename("/etc/machine-info")) < 0 && errno != ENOENT)
                         return -errno;
 
                 TAKE_PTR(s);
                 return 0;
         }
 
-        r = write_env_file_label("/etc/machine-info", l);
+        r = write_env_file_label(writable_filename("/etc/machine-info"), l);
         if (r < 0)
                 return r;
 
diff --git a/src/timedate/timedated.c b/src/timedate/timedated.c
index ad48330..3f60106 100644
--- a/src/timedate/timedated.c
+++ b/src/timedate/timedated.c
@@ -31,6 +31,7 @@
 #include "memory-util.h"
 #include "missing_capability.h"
 #include "path-util.h"
+#include "ro-etc-hack.h"
 #include "selinux-util.h"
 #include "service-util.h"
 #include "signal-util.h"
@@ -308,22 +309,22 @@ static int context_write_data_timezone(Context *c) {
 
                 if (access("/usr/share/zoneinfo/UTC", F_OK) < 0) {
 
-                        if (unlink("/etc/localtime") < 0 && errno != ENOENT)
+                        if (unlink(writable_filename("/etc/localtime")) < 0 && errno != ENOENT)
                                 return -errno;
 
                         return 0;
                 }
 
-                source = "../usr/share/zoneinfo/UTC";
+                source = "/usr/share/zoneinfo/UTC";
         } else {
-                p = path_join("../usr/share/zoneinfo", c->zone);
+                p = path_join("/usr/share/zoneinfo", c->zone);
                 if (!p)
                         return -ENOMEM;
 
                 source = p;
         }
 
-        return symlink_atomic(source, "/etc/localtime");
+        return symlink_atomic(source, writable_filename("/etc/localtime"));
 }
 
 static int context_write_data_local_rtc(Context *c) {
@@ -384,7 +385,7 @@ static int context_write_data_local_rtc(Context *c) {
                 *(char*) mempcpy(stpcpy(stpcpy(mempcpy(w, s, a), prepend), c->local_rtc ? "LOCAL" : "UTC"), e, b) = 0;
 
                 if (streq(w, NULL_ADJTIME_UTC)) {
-                        if (unlink("/etc/adjtime") < 0)
+                        if (unlink(writable_filename("/etc/adjtime")) < 0)
                                 if (errno != ENOENT)
                                         return -errno;
 
